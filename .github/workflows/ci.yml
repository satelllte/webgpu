name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  changes:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      native: ${{ steps.filter.outputs.native }}
      web: ${{ steps.filter.outputs.web }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Detect changes by filters
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            native:
              - './native/**'
            web:
              - './web/**'

  native:
    needs: changes
    if: ${{ needs.changes.outputs.native == 'true' }}
    env:
      WORKING_DIRECTORY: native
      BUILD_DIRECTORY: build
      BUILD_TYPE: Release
      EXECUTABLE_NAME: App
    timeout-minutes: 60
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # Ensure the feedback is delivered for all matrix combinations. Consider changing this to true when the workflow is stable.
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
          # There's some issue with passing Windows flags to CMake, so it finds the default MSVC compiler automatically even better.
          # - os: windows-latest
          #  c_compiler: cl.exe
          #  cpp_compiler: cl.exe
    defaults:
      run:
        working-directory: ${{env.WORKING_DIRECTORY}}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Python version
        run: python --version

      - name: Clang version
        run: clang --version

      - name: Clang++ version
        run: clang++ --version

      # Install CMake
      - name: Install CMake (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get install -y cmake
      - name: Install CMake (MacOS)
        if: runner.os == 'MacOs'
        run: brew install cmake
      - name: Install CMake (Windows)
        if: runner.os == 'Windows'
        run: choco install cmake
      - name: CMake Version
        run: cmake --version
      
      # Install Ninja
      - name: Install Ninja
        uses: seanmiddleditch/gha-setup-ninja@master

      # Install dependencies
      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt update
          # GLFW: https://www.glfw.org/docs/3.3/compile.html#compile_deps_x11
          sudo apt install xorg-dev
          # DAWN: https://github.com/google/dawn/blob/main/.github/workflows/ci.yml
          sudo apt install libgl-dev libx11-xcb-dev libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev libxext-dev wayland-protocols libwayland-dev libxkbcommon-dev

      # Windows: Setup MSVC compiler
      - name: Add MSBuild to PATH (Windows)
        if: runner.os == 'Windows'
        uses: microsoft/setup-msbuild@v1.3

      # Build
      - name: Configure CMake (non-Windows)
        if: runner.os != 'Windows'
        run: cmake -S . -G Ninja -B ${{env.BUILD_DIRECTORY}} -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
      - name: Configure CMake (Windows)
        if: runner.os == 'Windows'
        run: cmake -S . -G Ninja -B ${{env.BUILD_DIRECTORY}} -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
      - name: Build
        run: cmake --build ${{env.BUILD_DIRECTORY}} --config ${{env.BUILD_TYPE}}

      # Upload executable artifacts
      - name: Upload executable artifact (non-Windows)
        if: runner.os != 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: webgpu-${{runner.os}}
          path: ${{env.WORKING_DIRECTORY}}/${{env.BUILD_DIRECTORY}}/${{env.EXECUTABLE_NAME}}
      - name: Upload executable artifact (Windows)
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: webgpu-${{runner.os}}
          path: ${{env.WORKING_DIRECTORY}}/${{env.BUILD_DIRECTORY}}/Release/${{env.EXECUTABLE_NAME}}.exe

  web:
    needs: changes
    if: ${{ needs.changes.outputs.web == 'true' }}
    env:
      WORKING_DIRECTORY: web
      BUILD_DIRECTORY: out
    timeout-minutes: 5
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{env.WORKING_DIRECTORY}}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Bun
        uses: oven-sh/setup-bun@v1
      - name: Bun version
        run: bun --version
      - name: Install dependencies
        run: bun install --frozen-lockfile
      - name: Test (lint)
        run: bun run test:lint
      - name: Test (format)
        run: bun run test:format
      - name: Build
        run: bun run build
      - name: Upload static output artifact
        uses: actions/upload-artifact@v4
        with:
          name: web
          path: ${{env.WORKING_DIRECTORY}}/${{env.BUILD_DIRECTORY}}
